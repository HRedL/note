package com.hua.javaweb.jstl;
import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
/**
 * 自定义的HttpFilter，实现Filter接口
 *
 */
public abstract class HttpFilter implements Filter {
	/**
	 * 用于保存FilterConfig对象
	 */
	private FilterConfig filterConfig;
	
	/**
	 * 原生的doFilter方法，在方法内部ServletRequest和ServletResponse转为HttpServletRequest和HttpServletResponse
	 * 并调用了doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain arg2)
	 * 
	 * 若编写Filter的过滤方法不建议直接继承该方法，而建议继承
	 * doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain arg2)
	 */
	@Override
	public void doFilter(ServletRequest arg0, ServletResponse arg1, FilterChain arg2)
			throws IOException, ServletException {
		HttpServletRequest request=(HttpServletRequest) arg0;
		HttpServletResponse response=(HttpServletResponse) arg1;
		
		doFilter(request,response,arg2);
	}
	
	/**
	 * 抽象方法，为Http请求定制，必须实现的方法
	 * @param request
	 * @param response
	 * @param arg2
	 * @throws IOException
	 * @throws ServletException
	 */
	public abstract void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain arg2)
			throws IOException, ServletException;
	
	/**
	 * @return 返回init（FilterConfig）的FilterConfig对象
	 */
	public FilterConfig getFilterConfig() {
		return filterConfig;
	}
	
	/**
	 * 不建议子类直接覆盖，若直接覆盖，有可能导致filterConfig成员变量初始化失败
	 */
	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		this.filterConfig=filterConfig;
		init();
		
	}
	
	/**
	 *供子类继承的初始化方法，可以通过getFilterConfig（）获取FilterConfig对象
	 */
	protected void init() {}
	
	@Override
	public void destroy() {}

}